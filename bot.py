from admin import *
from words import word, g_text
import telebot
from telebot import types
import os
from flask import Flask, request
import math
import ast



server = Flask(__name__)
members_dict = {}
text_queue = {}
bot = telebot.TeleBot('5514371847:AAHyXwFZWL4Ak_EEXFa6CigjYGQFqquaCqI')
start_menu = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=False)
b1 = types.KeyboardButton(text='–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
b2 = types.KeyboardButton(text="–í–∏–¥ —Å–ª–æ–≤")
b3 = types.KeyboardButton(text="–¶–≤–µ—Ç –≥–ª–∞—Å–Ω—ã—Ö")
start_menu.add(b1, b2, b3)
oops = '–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞'


@bot.message_handler(commands=['start'])
def answer(message):
    global start_menu
    if message.chat.id in get_ids():
        bot.send_message(chat_id=message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ –¥—É–≥', reply_markup=start_menu)
    else:
        bot.send_message(chat_id=message.chat.id, text=oops)

@bot.message_handler(commands=['admin'])
def menu(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    b1 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data='add_user')
    b2 = types.InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –∫–æ–≥–æ-–Ω–∏–±—É–¥—å', callback_data='delete_user')
    markup.add(b1, b2)
    bot.send_message(chat_id=message.chat.id, text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=markup)

@bot.callback_query_handler(lambda query: query.data == 'add_user')
def ask_for_message(query):
    bot.send_message(chat_id=query.message.chat.id, text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å. –¢–æ–ª—å–∫–æ —Ç–∞–∫ —è —Å–º–æ–≥—É —É–∑–Ω–∞—Ç—å –µ–≥–æ –∞–π–¥–∏')
    message = query.message
    bot.register_next_step_handler(message, ask_name)

def ask_name(message):
    try:
        id = message.forward_from.id
    except: 
         bot.send_message(chat_id=message.chat.id, text='–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞')
         menu(message)
         return
    bot.send_message(chat_id=message.chat.id, text='–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?')
    bot.register_next_step_handler(message, add, id=id)

def add(message, id):
    if add_user(id, message.text, 'normal', 'false'):
        bot.send_message(chat_id=message.chat.id, text=f'–£—Å–ø–µ—Ö! {message.text} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É')
        bot.send_message(chat_id=id, text='–ü—Ä–∏–≤–µ—Ç, —è –°–ª–æ–≤–æ–º–∞—Å—Ç–µ—Ä, —Å–ø–µ—à—É —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –º–æ–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º. –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!')
        bot.send_message(chat_id=id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ, –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–∞ –¥—É–≥', reply_markup=start_menu)
    else:
        bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        menu(message)

@bot.callback_query_handler(lambda query: query.data == 'delete_user')
def users_list(query):
    users = get_users_list()
    markup = types.InlineKeyboardMarkup(row_width=1)
    for user in users:
        markup.add(types.InlineKeyboardButton(text=user, callback_data=f'delete_{user}'))
    bot.send_message(chat_id=query.message.chat.id, text='–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å', reply_markup=markup)

@bot.callback_query_handler(lambda query: query.data[:6] == 'delete')
def delete(query):
    if delete_user(query.data[7:]):
        bot.send_message(query.message.chat.id, text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.data[7:]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω')
    else:
        bot.send_message(chat_id=message.chat.id, text='–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        menu(message)

    
@bot.message_handler(commands=['text'])
def ask_text(message):
    if message.chat.id not in get_ids():
        bot.send_message(chat_id=message.chat.id, text=oops)
        return
    global exit
    global text_queue
    exit = False
    text_queue[str(message.chat.id)] = []
    markup = types.InlineKeyboardMarkup(row_width=1)
    item = types.InlineKeyboardButton(text='–í—ã—Ö–æ–¥', callback_data='–í—ã—Ö–æ–¥')
    markup.add(item)
    bot.send_message(chat_id=message.chat.id, text='‚≠ï–î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –Ω–∞–∂–º–∏—Ç–µ enter, –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ - shift+enter.\n‚≠ï–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –¥–≤–∞ —Å–∏–º–≤–æ–ª–∞ "_" –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±–∑–∞—Ü–∞\n‚≠ï–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –±—É–∫–≤, —Ç–æ—á–∫–∏, –∑–∞–ø—è—Ç—ã–µ, –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏.\n‚≠ï–ß—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /text.\n‚≠ï–ù–∞–∂–º–∏—Ç–µ "–í—ã—Ö–æ–¥", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏', reply_markup=markup)
    bot.send_message(chat_id=message.chat.id, text='üìù–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Çüëá')
    bot.register_next_step_handler(message, ask_size)

def ask_size(message):
    if exit:
        return
    text1 = message.text
    text_queue[str(message.chat.id)].append(text1)
    #bot.send_message(chat_id=599040955, text=text1)
    bot.send_message(chat_id=message.chat.id, text='–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞. –°—Ä–µ–¥–Ω–∏–π - 25. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ')
    bot.register_next_step_handler(message, ask_orientation)

def ask_orientation(message):
    if exit:
        del text_queue[str(message.chat.id)]
        return
    try:
        size = int(message.text)
    except:
        bot.send_message(chat_id=message.chat.id, text='–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')
        bot.register_next_step_handler(message, ask_orientation)
        return
    text_queue[str(message.chat.id)].append(size)
    markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True, resize_keyboard=True)
    item1 = types.KeyboardButton('–ê–ª—å–±–æ–º–Ω–∞—è')
    item2 = types.KeyboardButton('–ö–Ω–∏–∂–Ω–∞—è')
    markup.add(item1, item2)
    bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é', reply_markup=markup)
    bot.register_next_step_handler(message, create_text)

def create_text(message):
    global start_menu
    if exit:
        del text_queue[str(message.chat.id)]
        return
    orientation = message.text.lower()
    if orientation == '–∞–ª—å–±–æ–º–Ω–∞—è' or orientation == '–∫–Ω–∏–∂–Ω–∞—è':
        pass
    else:
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)
        item1 = types.KeyboardButton('–ê–ª—å–±–æ–º–Ω–∞—è')
        item2 = types.KeyboardButton('–ö–Ω–∏–∂–Ω–∞—è')
        markup.add(item1, item2)
        bot.send_message(chat_id=message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é, –Ω–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É', reply_markup=markup)
        bot.register_next_step_handler(message, ask_orientation)
        return
    text_queue[str(message.chat.id)].append(orientation)
    mode = '–û–±—ã—á–Ω—ã–π'
    try:
        msg = bot.send_message(chat_id=message.chat.id, text='–û–∂–∏–¥–∞–π—Ç–µ, –ø—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—èüïí')
        text, size, orientation = text_queue[str(message.chat.id)]
        photo, text2 = g_text(text, size, orientation, str(message.chat.id))
        photo.save(text[:6] + '.png')
        photo = open(text[:6] + '.png', 'rb')
        bot.send_document(chat_id=message.chat.id, data=photo, caption=text[:10] + '...')
        while text2 != '':
            photo, text2 = g_text(text2, size, orientation, str(message.chat.id))
            print(text2)
            photo.save(text[:6] + '.png')
            photo = open(text[:6] + '.png', 'rb')
            bot.send_document(chat_id=message.chat.id, data=photo, caption='–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ')
        bot.edit_message_text(text='–ì–æ—Ç–æ–≤–æ!', chat_id=message.chat.id, message_id=msg.id)
        bot.send_message(text='–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...', chat_id=message.chat.id, reply_markup=start_menu)
    except:
        bot.delete_message(chat_id=message.chat.id, message_id=msg.id)
        bot.send_message(chat_id=message.chat.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í —Ç–µ–∫—Å—Ç–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –∑–Ω–∞–∫–∏:\n!\n,\n?\n""\n_\n-\n.\n;\n:\n –ó–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã —Ä—É—Å—Å–∫–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞')
        bot.send_message(text='–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é...', chat_id=message.chat.id, reply_markup=start_menu)
    #bot.send_message(chat_id=599040955, text=str(text_queue))
    photo.close()
    os.remove(text[:6] + '.png')
    del text_queue[str(message.chat.id)]

@bot.message_handler(func=lambda m: m.text == '–í–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
def generate_text(message):
    ask_text(message)
    
@bot.message_handler(func=lambda m: m.text == '–í—ã–±—Ä–∞—Ç—å –≤–∏–¥ —Å–ª–æ–≤')
def ans(message):
    k = types.InlineKeyboardMarkup(row_width=1)
    k.add(types.InlineKeyboardButton(text='–û–±—ã—á–Ω—ã–π', callback_data='normal'))
    k.add(types.InlineKeyboardButton(text='–ë–µ–∑ –ê-–Ø', callback_data='w1'))
    k.add(types.InlineKeyboardButton(text='–ë–µ–∑ –£-–Æ', callback_data='w2'))
    k.add(types.InlineKeyboardButton(text='–ë–µ–∑ –´-–ò', callback_data='w3'))
    k.add(types.InlineKeyboardButton(text='–ë–µ–∑ –≠-–ï', callback_data='w4'))
    k.add(types.InlineKeyboardButton(text='–ë–µ–∑ –û-–Å', callback_data='w5'))
    bot.send_message(chat_id=message.chat.id, text='–í—ã–±–∏—Ä–∞–π—Ç–µ', reply_markup=k)

@bot.message_handler(func=lambda m: True, content_types=['text'])
def create_word(message):
    if message.chat.id not in get_ids():
        bot.send_message(chat_id=message.chat.id, text=oops)
        return
    try:
        try:
            for i in message.text.split():
                photo, new_line = word(i, str(message.chat.id))
                i = i.replace('?', '').replace('*', '')
                photo.save(i + '.png')
                photo = open(i + '.png', 'rb')
                bot.send_document(chat_id=message.chat.id, data=photo, caption=i)
                photo.close()
                os.remove(i + '.png')
        except:
            for i in message.text.split():
                photo, new_line = word(i, str(message.chat.id))
                i.replace('?', '').replace('*', '')
                photo.save(i + '.png')
                photo = open(i + '.png', 'rb')
                bot.send_document(chat_id=message.chat.id, data=photo, caption=i)
                photo.close()
                os.remove(i + '.png')
        #bot.send_message(chat_id=599040955, text=i)
    except Exception as e:
        print(e)
        try:
            for i in message.text.split():
                photo, newline = word(i, str(message.chat.id))
                i.replace('?', '').replace('*', '')
                photo.save(i + '.png')
                photo = open(i + '.png', 'rb')
                bot.send_document(chat_id=message.chat.id, data=photo, caption=i)
                photo.close()
                os.remove(i + '.png')
                #bot.send_message(chat_id=599040955, text=i)
        except:
            bot.send_message(chat_id=message.chat.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞–∫–æ–≤')
            return

@bot.callback_query_handler(lambda query: query.data == '–í—ã—Ö–æ–¥')
def exit_func(query):
    global start_menu
    bot.send_message(text='–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é...', chat_id=query.message.chat.id, reply_markup=start_menu)
    global exit
    exit = True
    return

@bot.callback_query_handler(lambda query: query.data == 'normal')
def f(query):
    global start_menu
    if r != None:
        if change_wordType(id, 'normal'):
            bot.send_message(chat_id=query.message.chat.id, text="–ì–æ—Ç–æ–≤–æ!", reply_markup=start_menu)
        else:
            bot.send_message(chat_id=query.message.chat.id, text="–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö!", reply_markup=start_menu)

@bot.callback_query_handler(lambda query: query.data == 'w1')
def f(query):
    global start_menu
    with open("preferences.txt", "r", encoding = 'utf-8') as f:
        data = ast.literal_eval(f.read())
        print(data)
    try:
        data[str(query.message.chat.id)]['wordType'] = '–∞—è'
    except:
        data[str(query.message.chat.id)] = {'wordType': '–∞—è'}
    with open("preferences.txt", "w", encoding = 'utf-8') as f:
        f.write(str(data))
    bot.send_message(chat_id=query.message.chat.id, text="–ì–æ—Ç–æ–≤–æ!", reply_markup=start_menu)

@bot.callback_query_handler(lambda query: query.data == 'w2')
def f(query):
    global start_menu
    with open("preferences.txt", "r", encoding='utf-8') as f:
        data = ast.literal_eval(f.read())
    try:
        data[str(query.message.chat.id)]['wordType'] = '—É—é'
    except:
        data[str(query.message.chat.id)] = {'wordType': '—É—é'}
    with open("preferences.txt", "w", encoding='utf-8') as f:
        f.write(str(data))
    bot.send_message(chat_id=query.message.chat.id, text="–ì–æ—Ç–æ–≤–æ!", reply_markup=start_menu)

@bot.callback_query_handler(lambda query: query.data == 'w3')
def f(query):
    global start_menu
    with open("preferences.txt", "r", encoding='utf-8') as f:
        data = ast.literal_eval(f.read())
    try:
        data[str(query.message.chat.id)]['wordType'] = '—ã–∏'
    except:
        data[str(query.message.chat.id)] = {'wordType': '—ã–∏'}
    with open("preferences.txt", "w", encoding='utf-8') as f:
        f.write(str(data))
    bot.send_message(chat_id=query.message.chat.id, text="–ì–æ—Ç–æ–≤–æ!", reply_markup=start_menu)

@bot.callback_query_handler(lambda query: query.data == 'w4')
def f(query):
    global start_menu
    with open("preferences.txt", "r", encoding='utf-8') as f:
        data = ast.literal_eval(f.read())
    try:
        data[str(query.message.chat.id)]['wordType'] = '—ç–µ'
    except:
        data[str(query.message.chat.id)] = {'wordType': '—ç–µ'}
    with open("preferences.txt", "w", encoding='utf-8') as f:
        f.write(str(data))
    bot.send_message(chat_id=query.message.chat.id, text="–ì–æ—Ç–æ–≤–æ!", reply_markup=start_menu)

@bot.callback_query_handler(lambda query: query.data == 'w5')
def f(query):
    global start_menu
    with open("preferences.txt", "r", encoding='utf-8') as f:
        data = ast.literal_eval(f.read())
    try:
        data[str(query.message.chat.id)]['wordType'] = '–æ—ë'
    except:
        data[str(query.message.chat.id)] = {'wordType': '–æ—ë'}
    with open("preferences.txt", "w", encoding='utf-8') as f:
        f.write(str(data))
    bot.send_message(chat_id=query.message.chat.id, text="–ì–æ—Ç–æ–≤–æ!", reply_markup=start_menu)


@server.route('/' + '5514371847:AAHyXwFZWL4Ak_EEXFa6CigjYGQFqquaCqI', methods=['POST'])
def getMessage():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return "!", 200


@server.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url='https://brackets-tg-bot.herokuapp.com/' + '5514371847:AAHyXwFZWL4Ak_EEXFa6CigjYGQFqquaCqI')
    return "!", 200

if __name__ == '__main__':
    server.debug = True
    server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
